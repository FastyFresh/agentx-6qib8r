version: '3.8'

name: agent-platform

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: agent-platform/api-gateway:dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    volumes:
      - ./api-gateway:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_VERSION=v1
      - CORS_ORIGIN=http://localhost:5173
      - LOG_LEVEL=debug
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_PROXY_URL=http://kong:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      auth-service:
        condition: service_healthy
      agent-generator:
        condition: service_healthy
      nlp-engine:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agent-platform-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # NLP Engine Service
  nlp-engine:
    build:
      context: ./nlp-engine
      dockerfile: Dockerfile
    image: agent-platform/nlp-engine:dev
    volumes:
      - ./nlp-engine:/app
      - nlp-models:/app/models
    environment:
      - PYTHON_ENV=development
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Agent Generator Service
  agent-generator:
    build:
      context: ./agent-generator
      dockerfile: Dockerfile
    image: agent-platform/agent-generator:dev
    volumes:
      - ./agent-generator:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agent_platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    image: agent-platform/auth-service:dev
    volumes:
      - ./auth-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=agent_platform
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d agent_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agent-platform-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

networks:
  agent-platform-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      encrypted: "true"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/prometheus
      o: bind
  nlp-models:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/nlp-models
      o: bind